@model Battlezeppelins.Models.Data
<div id="game" style="display: none;">
    <p id="opponent"></p> <input type="button" onclick="surrenderGame()" value="Surrender" />
</div>

<div class="row">
  <div class="col-xs-8">
    <table class="table table-bordered" id="gameTable" style="width:400px;">
      @for(var y = 0; y < 10; y++){
      <tr style="height:40px">
        @for(var x = 0; x < 10; x++){
          <td style="padding:0px;">
            <button type="button" id="@x,@y" class="btn btn-info" style="width:40px;height:40px;padding:0px"></button>
          </td>
        }
      </tr>
      }
    </table>
  </div>

  <div class="col-xs-4">
    <div class="row">
      <div class="btn-group">
        <button type="button" class="btn btn-default" id="rotation1" value="Up">Up</button>
        <button type="button" class="btn btn-default" id="rotation2" value="Down">Down</button>
        <button type="button" class="btn btn-default" id="rotation3" value="Right">Right</button>
        <button type="button" class="btn btn-default" id="rotation4" value="Left">Left</button>
      </div>
    </div>
    <div class="row">
      <div id="drag">
        @foreach (var item in Model.zeppelinType)
        {
          <div class="well well-sm" style="width:60px;" id="@item.Name">@item.Name</div>
        }
      </div>
    </div>
  </div>
</div>

<script>
  var ship = function (size, name) {
    this.id = name;
    this.name = name;
    this.sname = name.substring(0, 3);
    this.size = size;
    this.x;
    this.y;
    this.rotation;
  };
  ship.prototype.place = function (x,y) {
    this.x = x;
    this.y = y;
  };
  
  var ships = [
  @foreach (var item in Model.zeppelinType)
  {
  @* { ship : new ship(x,"z") }, *@
  @Html.Raw("  { \"ship\" : new ship(" + @item.Length + ", \"" + @item.Name + "\") },")
  }
  ];

  var showShip = function (ship) {
    for(var i = 0; i < ship.size; i++) {
        $("button[id^='" + ship.x + "," + (i + parseInt(ship.y)) + "']").text(ship.sname);
    }
  };

  $(function () {
    $("#drag div").draggable({
      appendTo: "body"
    });
    $("#gameTable button").droppable({
      drop: function (even, ui) {
        var xy = $(this).attr('id').split(',');
        var shipId = $(ui.draggable).attr("id");
        var ship = $.grep(ships, function (e) { return e.ship.id == shipId; })[0].ship;
        ship.place(xy[0], xy[1]);
        ui.draggable.remove();
        showShip(ship);
      }
    })
  });

  $("button[id^='rotation']").click(function () {
    if ($(this).hasClass("btn-success"))
      return;
    $("button[id^='rotation']").removeClass("btn-success");
    $(this).addClass("btn-success");
  });
  
  function pollGameMetadata() {
    $.getJSON('@Url.Content("~/Game/Metadata")', function (data) {
      var div = document.getElementById("game");
      var text = document.getElementById("opponent");
      if (data.playing) {
        text.textContent = "Playing with " + data.opponent;
        div.style.display = "inline-block";
      } else {
        div.style.display = "none";
      }
    });
  }
  window.setInterval(pollGameMetadata, 5000);
  pollGameMetadata();

  function surrenderGame() {
    $.ajax({
      type: "POST",
      url: "Game/Surrender",
      success: function (data) {
        pollGameMetadata();
      }
    });
  }

</script>
