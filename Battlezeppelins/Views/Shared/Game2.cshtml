@model Battlezeppelins.Models.Data

<div class="row" style="padding-top:20px;">
  <div class="col-xs-8" style="padding-left:200px">
    <div class="gameEnemy" id="opponentTable" style="z-index:100">
      <table class="table table-bordered">
        @for(var y = 0; y < 10; y++){
        <tr>
          @for(var x = 0; x < 10; x++){
            <td style="padding:0px;">
              <button type="button" id="@x,@y" class="btn btn-info"></button>
            </td>
          }
        </tr>
        }
      </table>
    </div>

    <div class="game" id="gameTable">
      <div class="" id="owngameTable">
        <table class="table table-bordered">
          @for(var y = 0; y < 10; y++){
          <tr style="padding:0px">
            @for(var x = 0; x < 10; x++){
              <td style="padding:0px;padding-bottom:2px">
                <button type="button" id="@x,@y" class="btn btn-info"></button>
              </td>
            }
          </tr>
          }
        </table>
      </div>
    </div>
  </div>

  <div class="col-xs-4">
    <div class="row" id="game" style="display: none;">
      <div class="col-xs-8">
        <h4 class="text-primary" id="opponent"></h4> 
      </div>
      <div class="col-xs-4">
        <button type="button" class="btn btn-danger" onclick="surrenderGame()">Surrender</button>
      </div>
    </div>
    <div id="placement">
      <div class="row">
        <div class="btn-group btn-group-justified">
          <a type="button" class="btn btn-success" id="continue" disabled="true">Continue</a>
          <a type="button" class="btn btn-danger" id="reset" onclick="ships.reset()">Reset</a>
        </div>
        <div class="btn-group" style="padding-top:10px">
          <button type="button" class="btn btn-default" id="rotation1" value="Up">Up</button>
          <button type="button" class="btn btn-default" id="rotation2" value="Down">Down</button>
          <button type="button" class="btn btn-default" id="rotation3" value="Right">Right</button>
          <button type="button" class="btn btn-default" id="rotation4" value="Left">Left</button>
        </div>
      </div>
      <div class="row" style="padding-top:10px;">
        <div id="drag">
          @foreach (var item in Model.zeppelinType)
          {
            var length = item.length * 40 + "px";
            <div class="well well-sm" style="width:@length;" id="@item.name">@item.name</div>
          }
        </div>
      </div>
    </div>
  </div>
</div>

<script>
	var playing = false;

  function Ship(size, name) {
    this.id = name;
    this.name = name;
    this.sname = name.substring(0, 3);
    this.size = size;
    this.x;
    this.y;
    this.rotation;

    this.place = function (x,y) {
        this.x = x;
        this.y = y;

        var draggable = document.getElementById(this.id);
        draggable.parentNode.removeChild(draggable);

        for (var i = 0; i < this.size; i++) {
          $("#gameTable button[id^='" + this.x + "," + (i + parseInt(this.y)) + "']").text(this.sname);
        }

        if (ships.allSet())
          $("#continue").attr("disabled", false);
    };

    this.safe = function () {
      var ship = this;
      $.ajax({
        type: "POST",
        url: '@Url.Content("~/Game/AddZeppelin")',
        data: {
          type: ship.name,x: ship.x, y: ship.y,
          rotDown: true
        }
      });
    };
  };

  function ShipList() {
    this.list = [
      @foreach (var item in Model.zeppelinType)
      {
        @* { "ship" : new ship(x,"z") }, *@
        @Html.Raw("      { \"ship\" : new Ship(" + @item.length + ", \"" + @item.name + "\") }, \n")
      }
    ];
    this.get = function(shipId) {
      return $.grep(this.list, function (e) { return e.ship.id == shipId; })[0].ship;
    }
    this.allSet = function(){
      var set = false;
      $.each(this.list, function (i, ship) {
        if (typeof ship.ship.x === "undefined")
          return set = false;
        return set = true;
      });
      return set;
    }
    this.reset = function () {
      $("#continue").attr("disabled", true);
      $("#drag").empty();
      $.each(this.list, function (i, ship) {
        for (var i = 0; i < ship.ship.size; i++)
          $("#gameTable  button[id^='" + ship.ship.x + "," + (i + parseInt(ship.ship.y)) + "']").text('');
        ship.ship.x = "undefined";
        ship.ship.y = "undefined";
        $("#drag").append('<div class="well well-sm" style="width:' +
                          ship.ship.size * 40 + 'px;" id="' + ship.ship.name +
                          '">' + ship.ship.name + '</div>');
        $("#drag div").draggable({
          appendTo: "body",
          cursorAt: { top: 0, left: 0 }
        });
      });
    }
    this.safeAll = function () {
      $.each(this.list, function (i, ship) {
        ship.ship.safe();
      });
    };
  };
  var ships = new ShipList();

  $("#opponentTable button").click(function () {
    var slot = $(this);
    var xy = $(this).attr('id').split(',');
    $.ajax({
      type: "POST",
      url: '@Url.Content("~/Game/OpenPoint")',
      data: {
        x: xy[0], y: xy[1]
      },
      success: function (success) {
          if (success) {
          slot.addClass("usedSlot");
          slot.attr("disabled", true);
        }
      }
    });
  });

  $("#continue").click(function () {
      ships.safeAll();
      toGamePhase();
  });
  function toGamePhase() {
      $("#placement").hide();
      $("#opponentTable").show({ effect: 'drop', direction: "up", mode: 'slow', duration: 2000 });
      $("#gameTable").removeClass("game").addClass("gameOwn");
      $("#owngameTable").addClass("gameOwn2");
      $("#gameTable button").attr("disabled", true);
  }


  $(function () {
    $("#drag div").draggable({
      appendTo: "body",
      cursorAt: { top: 0, left: 0 }
    });
    $("#gameTable button").droppable({
      tolerance: "pointer",
      drop: function (even, ui) {
        var xy = $(this).attr('id').split(',');
        var shipId = $(ui.draggable).attr("id");
        var ship = ships.get(shipId);
        ship.place(xy[0], xy[1]);
      }
    })
  });

  $("button[id^='rotation']").click(function () {
    if ($(this).hasClass("btn-success"))
      return;
    $("button[id^='rotation']").removeClass("btn-success");
    $(this).addClass("btn-success");
  });

  $(document).ready(function () {
    $("#opponentTable").hide();
  });
  
  function pollGameMetadata() {
    $.getJSON('@Url.Content("~/Game/Metadata")', function (data) {
      var div = document.getElementById("game");
      var text = document.getElementById("opponent");
      if (data.playing) {
      	playing = true;

      	text.textContent = "Playing with " + data.opponent;
      	div.style.display = "inline-block";
      } else {
      	playing = false;

      	if (data.opponent) {
      		var result = (data.gameState == "YOU_WIN") ? "win" : "lose";
      		text.textContent = "You " + result + " against " + data.opponent;

      		if (data.stateReason == "SURRENDER")
      			text.textContent += " (surrender)";
      		else if (data.stateReason == "INACTIVITY")
      			text.textContent += " (inactivity)";

      		div.style.display = "inline-block";
      	} else {
      		div.style.display = "none";
      	}
      }
    });
  }
  window.setInterval(pollGameMetadata, 5000);
  pollGameMetadata();

  function constructGame() {
    $.ajax({
      type: "POST",
      url: '@Url.Content("~/Game/GetPlayerTable")',
      success: function (data) {
          $.each(data.zeppelins, function (i, zeppelin) {
              var ship = ships.get(zeppelin.type.name);
              ship.place(zeppelin.location.x, zeppelin.location.y);
          });
          if (ships.allSet())
            toGamePhase();
      }
    });
  }
  constructGame();

  function pollTurnData() {
  	if (playing) {
  		$.getJSON('@Url.Content("~/Game/GetTurn")', function (data) {
  			if (data.turn != data.lastOpen.hit) {
					// Opponent opened the last time
  				var slot = $("#owngameTable button[id^='" + data.lastOpen.x + "," + data.lastOpen.y + "']");
  				slot.addClass("usedSlot");
  			} else {
  				// You opened the last time
  				var slot = $("#opponentTable button[id^='" + data.lastOpen.x + "," + data.lastOpen.y + "']");
  				if (data.lastOpen.hit == true) {
  					slot.addClass("hitSlot");
  				}
  			}

  			var btns = $('#opponentTable button');
  			if (!data.turn) {
  				btns.attr('disabled', true).fadeTo('slow', 0.6);
  			} else {
  				btns.attr('disabled', false).fadeTo('fast', 1.0);
  			}
  		});
  	}
	}
	window.setInterval(pollTurnData, 500);
	pollTurnData();

  function surrenderGame() {
    $.ajax({
      type: "POST",
      url: '@Url.Content("~/Game/Surrender")',
      success: function (data) {
        pollGameMetadata();
      }
    });
  }

</script>
