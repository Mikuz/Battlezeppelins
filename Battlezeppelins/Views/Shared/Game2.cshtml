@model Battlezeppelins.Models.Data

<div class="container">
	<div class="row">
		<div class="col-sm-7" id="gameColumn">
			<div class="gameEnemy" id="opponentTable" style="z-index:100">
				<table class="table table-bordered">
					@for(var y = 0; y < 10; y++){
					<tr>
						@for(var x = 0; x < 10; x++){
							<td style="padding:0px;">
								<button type="button" id="@x,@y" class="btn btn-info"></button>
							</td>
						}
					</tr>
					}
				</table>
			</div>

			<div class="game" id="gameTable">
				<div class="" id="owngameTable">
					<table class="table table-bordered">
						@for(var y = 0; y < 10; y++){
						<tr style="padding:0px">
							@for(var x = 0; x < 10; x++){
								<td style="padding:0px;padding-bottom:2px">
									<button type="button" id="@x,@y" class="btn btn-info"></button>
								</td>
							}
						</tr>
						}
					</table>
				</div>
			</div>
		</div>

		<div class="col-sm-4" id="controlColumn">
			<div class="row" id="game" style="display: none;">
				<div class="col-xs-12">
					<div class="row" style="margin: 0 auto;">
							<h4 class="text-primary" id="opponent"></h4> 
					</div>
					<div class="row">
						<button type="button" class="btn btn-block btn-danger" onclick="surrenderGame()">Surrender</button>
					</div>
				</div>
			</div>
			<div id="placement" style="padding-top:10px">
				<div class="row">
					<div class="btn-group btn-group-justified">
						<a type="button" class="btn btn-success" id="continue" disabled="true">Continue</a>
						<a type="button" class="btn btn-danger" id="reset" onclick="ships.reset()">Reset</a>
					</div>
				</div>
				<div class="row" style="padding-top:10px;">
					<div class="panel panel-primary">
						<div class="panel-heading text-center">
							<div class="btn-group">
								<button type="button" class="btn btn-default btn-success" id="rotation1" value="Down" onclick="rotation = 1">Horizontal</button>
								<button type="button" class="btn btn-default" id="rotation2" value="Right" onclick="rotation = 2">Vertical</button>
							</div>
						</div>
						<div id="drag" class="panel-body">
							@foreach (var item in Model.zeppelinType)
							{
								var length = item.length * 40 + "px";
								<div class="well well-sm draggableShip" style="width:@length;cursor: pointer;" id="@item.name" ondragstart="shipDragHandler(this)">@item.name</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	localStorage.setItem("challengeWaiting", "false");

	var gamePhase = false;
	var rotation = 1;
	var lastTurn = undefined;

  function Ship(size, name) {
    this.id = name;
    this.name = name;
    this.sname = name.substring(0, 3);
    this.size = size;
    this.x;
    this.y;
    this.rotation;

    this.place = function (x,y) {
    	this.rotation = rotation;
    	this.x = x;
    	this.y = y;

      var draggable = document.getElementById(this.id);
      draggable.parentNode.removeChild(draggable);

      for (var i = 0; i < this.size; i++) {
        var xMod = 0;
        var yMod = 0;
        if (this.rotation == 1) xMod = i;
        else if (this.rotation == 2) yMod = i;
        $("#gameTable button[id^='" + (parseInt(this.x) + xMod) + "," + (parseInt(this.y) + yMod) + "']").text(this.sname);
      }

      if (ships.allSet())
        $("#continue").attr("disabled", false);
    };

    this.safe = function () {
      var ship = this;
      $.ajax({
        type: "POST",
        url: '@Url.Content("~/Game/AddZeppelin")',
        data: {
        	type: ship.name,
        	x: ship.x,
        	y: ship.y,
        	rotDown: (ship.rotation == 2)
        }
      });
    };
  };

  function ShipList() {
    this.list = [
      @foreach (var item in Model.zeppelinType)
      {
        @* { "ship" : new ship(x,"z") }, *@
        @Html.Raw("      { \"ship\" : new Ship(" + @item.length + ", \"" + @item.name + "\") }, \n")
      }
    ];
    this.get = function(shipId) {
      return $.grep(this.list, function (e) { return e.ship.id == shipId; })[0].ship;
    }
    this.allSet = function(){
      var set = false;
      $.each(this.list, function (i, ship) {
        if (typeof ship.ship.x === "undefined")
          return set = false;
        return set = true;
      });
      return set;
    }
    this.reset = function () {
      $("#continue").attr("disabled", true);
      $.each(this.list, function (i, ship) {
      	for (var i = 0; i < ship.ship.size; i++) {
      		var xMod = 0;
      		var yMod = 0;
      		if (ship.ship.rotation == 1) xMod = i;
      		else if (ship.ship.rotation == 2) yMod = i;
      		$("#gameTable  button[id^='" + (parseInt(ship.ship.x) + xMod) + "," + (parseInt(ship.ship.y) + yMod) + "']").text('');
      	}
        ship.ship.x = undefined;
        ship.ship.y = undefined;
      });
      this.changeShipRotation();
    }
    this.changeShipRotation = function () {
    	$("#drag").empty();
    	$.each(this.list, function (i, ship) {
    		if (ship.ship.x == undefined || ship.ship.y == undefined) {

    			$("#drag").append('<div class="well well-sm draggableShip" style="width:' +
															ship.ship.size * 40 + 'px;cursor: pointer;" id="' + ship.ship.name +
															'" ondragstart="shipDragHandler(this)">' + ship.ship.name + '</div>');

    			$("#drag div").draggable({
    				appendTo: "body",
    				cursorAt: { top: 20, left: 20 }
    			});

    			if (rotation == 2) {
    				var shipE = $("#" + ship.ship.name);

    				shipE.css({
    					"-webkit-transform-origin": "bottom left",
    					"-moz-transform-origin": "bottom left",
    					"-o-transform-origin": "bottom left",
    					"transform-origin": "bottom left",
    					WebkitTransform: 'rotate(90deg)',
    					'-moz-transform': 'rotate(90deg)'
    				});

    				var dragTop = $("#drag").clientTop;

    				shipE.css({ "top": -50 + "px" });
    				shipE.css({ "left": i * 50 + "px" });
    			}
    		}
    	});
    }
    this.safeAll = function () {
      $.each(this.list, function (i, ship) {
        ship.ship.safe();
      });
    };
  };
	var ships = new ShipList();

  $("#opponentTable button").click(function () {
    var slot = $(this);
    var xy = $(this).attr('id').split(',');
    $.ajax({
      type: "POST",
      url: '@Url.Content("~/Game/OpenPoint")',
      data: {
        x: xy[0], y: xy[1]
      },
      success: function (success) {
          if (success) {
          	openSlot(slot);
        }
      }
    });
  });
	function openSlot(slot) {
		slot.addClass("usedSlot");
		slot.attr("disabled", true);
	}

  $("#continue").click(function () {
      ships.safeAll();
      toGamePhase();
  });
  function toGamePhase() {
  	  gamePhase = true;
      $("#placement").hide();
      $("#opponentTable").show({ effect: 'drop', direction: "up", mode: 'slow', duration: 2000 });
      $("#gameTable").removeClass("game").addClass("gameOwn");
      $("#owngameTable").addClass("gameOwn2");
      $("#gameTable button").attr("disabled", true);

      $("#body").css({
      	"min-width": "780px"
      });
      $("#gameColumn").css({
      		"padding-left": "8%",
      		"max-height": "750px"
      });
      $("#controlColumn").css({
      	"padding-bottom": "20px",
      	"max-width": "400px"
      });

      $("#gameColumn").removeClass("col-sm-7").addClass("col-lg-8");
      $("#controlColumn").removeClass("col-sm-4").addClass("col-lg-3");

      $("#helpBoardBuilding").css({
      	"display": "none"
      });
      $("#helpFighting").css({
      	"display": "block"
      });
  }

  $("#body").css({
  	"min-width": "450px"
  });


  $(function () {
    $("#drag div").draggable({
      appendTo: "body",
      cursorAt: { top: 20, left: 20 }
    });
    $("#gameTable button").droppable({
      tolerance: "pointer",
      drop: function (even, ui) {
        var xy = $(this).attr('id').split(',');
        var shipId = $(ui.draggable).attr("id");
        var ship = ships.get(shipId);
        ship.place(xy[0], xy[1]);
      }
    })
  });

  function shipDragHandler(e) {
  	$("html, body").animate({ scrollTop: 0 }, "slow");
  }

  $("button[id^='rotation']").click(function () {
    if ($(this).hasClass("btn-success"))
      return;
    $("button[id^='rotation']").removeClass("btn-success");
    $(this).addClass("btn-success");

    ships.changeShipRotation();
  });

  $(document).ready(function () {
    $("#opponentTable").hide();
  });
  
  function pollGameMetadata() {
    $.getJSON('@Url.Content("~/Game/Metadata")', function (data) {
      var div = document.getElementById("game");
      var text = document.getElementById("opponent");
      if (data.playing) {
      	text.textContent = "Playing with " + data.opponent;
      	div.style.display = "";
      } else {
      	if (data.opponent) {
      		var result = (data.gameState == "YOU_WIN") ? "win" : "lose";
      		text.textContent = "You " + result + " against " + data.opponent;

      		if (data.stateReason == "SURRENDER")
      			text.textContent += " (surrender)";
      		else if (data.stateReason == "INACTIVITY")
      			text.textContent += " (inactivity)";

      		div.style.display = "";
      	} else {
      		div.style.display = "none";
      	}
      }
    });
  }
  window.setInterval(pollGameMetadata, 5000);
  pollGameMetadata();

  function constructGame() {
    $.ajax({
      type: "POST",
      url: '@Url.Content("~/Game/GetPlayerTable")',
      success: function (data) {
          $.each(data.zeppelins, function (i, zeppelin) {
          		var ship = ships.get(zeppelin.type.name);
          		rotation = zeppelin.rotDown ? rotation = 2 : rotation = 1;
              ship.place(zeppelin.location.x, zeppelin.location.y);
          });
          rotation = 1;
          if (ships.allSet())
          	toGamePhase();

          $.each(data.openPoints, function (i, openPoint) {
          	var slot = $("#owngameTable button[id^='" + openPoint.x + "," + openPoint.y + "']");
          	openSlot(slot);
          	if (openPoint.hit) slot.addClass("hitSlot");
          });
      }
    });
  	$.ajax({
  		type: "POST",
  		url: '@Url.Content("~/Game/GetOpponentTable")',
      success: function (data) {
      	$.each(data.openPoints, function (i, openPoint) {
      		var slot = $("#opponentTable button[id^='" + openPoint.x + "," + openPoint.y + "']");
      		openSlot(slot);
      		if (openPoint.hit)
      			slot.addClass("hitSlot");
      	});
      }
		});
  }
  constructGame();

  function pollTurnData() {
  	if (gamePhase) {
  		$.getJSON('@Url.Content("~/Game/GetTurn")', function (data) {
  			if (data != null) {
  				if (data.lastOpen != null) {
  					if (data.turn != data.lastOpen.hit) {
  						// Opponent opened the last time
  						var slot = $("#owngameTable button[id^='" + data.lastOpen.x + "," + data.lastOpen.y + "']");
  						slot.addClass("usedSlot");
  						if (data.lastOpen.hit)
  							slot.addClass("hitSlot");
  					} else {
  						// You opened the last time
  						var slot = $("#opponentTable button[id^='" + data.lastOpen.x + "," + data.lastOpen.y + "']");
  						if (data.lastOpen.hit)
  							slot.addClass("hitSlot");
  					}
  				}

  				if (lastTurn == undefined || data.turn != lastTurn) {
  					lastTurn = data.turn;
  					var btns = $('#opponentTable button');
  					if (!data.turn) {
  						btns.attr('disabled', true).fadeTo('slow', 0.6);
  					} else {
  						btns.attr('disabled', false).fadeTo('fast', 1.0);
  					}
  				}
  			}
  		});
  	}
	}
	window.setInterval(pollTurnData, 200);
	pollTurnData();

  function surrenderGame() {
    $.ajax({
      type: "POST",
      url: '@Url.Content("~/Game/Surrender")',
      success: function (data) {
        pollGameMetadata();
      }
    });
  }

</script>
